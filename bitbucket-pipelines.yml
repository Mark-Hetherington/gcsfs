image:
  name: eu.gcr.io/lofty-seer-161814/othoz-docker-base:0.6.0
  username: _json_key
  password: $GCP_DEPLOYMENT_SERVICE_ACCOUNT_KEY_FILE

pipelines:
  default:
  - step:
      script:
      # ENV variable refers to secret key for GCP Service account 'deployment-service-account@lofty-seer-161814.iam.gserviceaccount.com'
      # Among others this service account gives access to Kubernetes (required for deployments), GCS read/write (required by the application itself, e.g.
      # StorageBackendGCS), ML Engine (required by integration tests?), Container Builder (required by this build pipeline in order to build Docker images
      # using Google Container Builder), ...
      - echo ${GCP_DEPLOYMENT_SERVICE_ACCOUNT_KEY_FILE} > /root/client-secret.json
      - export GOOGLE_APPLICATION_CREDENTIALS=/root/client-secret.json

      # Authenticate and configure gcloud commandline utility for ml job deployments
      - gcloud auth activate-service-account --key-file /root/client-secret.json
      - gcloud config set project ${GCP_PROJECT_ID}

      # Create and activate local conda environment.
      - conda activate base
      - anaconda login --username $ANACONDA_USERNAME --password $ANACONDA_PASSWORD

      # Filter out all dev-only dependencies to reduce time required to run conda env create
      - awk '!/#othoz:dev/' environment.yml > environment.ci.yml
      - conda env create -f environment.ci.yml --verbose
      - conda activate fs-gcsfs

      - flake8

      # Note: when running in the 'ci' environment the test.py script generates test results in  XUnit XML format in a subfolder named test-results.
      # Those will be automatically be picked up by Bitbucket Pipelines and used to display information about how many tests have succeeded / failed
      - ./test unit --environment=ci

      # Build package to test if the build process works. Must add conda-forge channel
      # because we are drawing in some dependencies from this channel
      # Note that we need to provide the full URL to the othoz repository in order for
      # the build to work; just providing --channel othoz causes the build to fail (effective 5 Nov 2017).
      # This is probably a bug in conda in we could reinvestigate at a later point in time.
      - conda build -c conda-forge -c https://conda.anaconda.org/othoz/ --no-include-recipe --no-anaconda-upload .

      # Consider the run successful only after all steps have executed and thus send coverage information as the
      # very last step in order to avoid reporting coverage info for failed runs.
      # TODO uncomment: Needs CODACY_PROJECT_TOKEN
      # - python-codacy-coverage -r coverage.xml
  tags:
    '*':
    - step:
        script:
        - echo ${GCP_DEPLOYMENT_SERVICE_ACCOUNT_KEY_FILE} > /root/client-secret.json
        - export GOOGLE_APPLICATION_CREDENTIALS=/root/client-secret.json

        - gcloud auth activate-service-account --key-file /root/client-secret.json
        - gcloud config set project ${GCP_PROJECT_ID}

        # Create and activate local conda environment.
        - conda activate base
        - anaconda login --username $ANACONDA_USERNAME --password $ANACONDA_PASSWORD

        # Filter out all dev-only dependencies to reduce time required to run conda env create
        - awk '!/#othoz:dev/' environment.yml > environment.ci.yml
        - conda env create -f environment.ci.yml --verbose
        - conda activate fs-gcsfs

        - flake8

        # Run all tests (unit + integration).
        # Note: by specifying the --environment='ci' argument the test script generates test results in  XUnit XML format in a subfolder named test-results.
        # Those will be automatically be picked up by Bitbucket Pipelines and used to display information about how many tests have succeeded / failed
        - ./test unit --environment=ci
        # - ./test integration --environment=ci  TODO this fails when there are no integration tests

        # Build package to test if the build process works. Must add conda-forge channel
        # because we are drawing in some dependencies from this channel
        # Note that we need to provide the full URL to the othoz repository in order for
        # the build to work; just providing --channel othoz causes the build to fail (effective 5 Nov 2017)
        - conda build -c conda-forge -c https://conda.anaconda.org/othoz/ --no-include-recipe --no-anaconda-upload .

        # Upload package (NOTE: use the same package influencing options, e.g. "--no-include-recipe", as in the actual build step)
        - conda activate base
        - anaconda upload --private --user othoz "$(conda build -c conda-forge -c https://conda.anaconda.org/othoz/ --no-include-recipe --output .)"

        # Consider the run successful only after all steps have executed and thus send coverage information as the
        # very last step in order to avoid reporting coverage info for failed runs.
        # TODO uncomment: Needs CODACY_PROJECT_TOKEN
        # - conda activate fs-gcsfs
        # - python-codacy-coverage -r coverage.xml
